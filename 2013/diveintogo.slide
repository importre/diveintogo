Dive into Go
A Go Primer
16 Oct 2013

허재위
GDG Korea Golang


#########################
* Agenda

- Introducing Go
- Hello Golang!
- Arrays and Slices
- Strings
- Collections
- Handling Errors
- Goroutines


###############################################################################
* Introducing Go
###############################################################################

#########################
* Go Designers

- Gopher

.image diveintogo/gophercolor.png 280 280

- 롭 파이크(Rob Pike)
- 켄 톰슨(Ken Thompson)
- 로버트 그리스머(Robert Griesemer)


#########################
* Advantages

- 동시실행 (Concurrency)
- 빠른 속도
- 간결한 문법
- 낮은 의존성


###############################################################################
* Hello Golang!
###############################################################################

#########################
* The Structure of a .go (1/2)

- diveintogo.go

.play diveintogo/hellogo.go


#########################
* The Structure of a .go (2/2)

Three parts

- package

    main 인 경우 반드시 func main()이 존재해야 함

- import

    코드가 링크될 때 package가 import 됨
    Go 프로그램이 package가 없어서 죽지 않도록 보장
    import를 통해 참조되는 package에 대해 플래그를 링커에 제공할 필요 없음

- 기타

    타입, 변수, 함수 선언 등


#########################
* Variables

- `var` 키워드 사용
- `:=` 초기화 연산자 사용
- 원시(primative) 타입의 포인터를 만들 수 있음

.play diveintogo/variables.go /START OMIT/,/END OMIT/


#########################
* Functions (1/2)

*func* 키워드 사용

    func add(i int, j int) int {
        return i + j
    }

같은 타입이 연속이면 마지막에 한번만 써도 됨

    func add(i, j int) int {
        return i + j
    }

미리 리턴 변수 명을 정할 수 있음

.play diveintogo/functions1.go /START OMIT/,/END OMIT/


#########################
* Functions (2/2)

- closure

.play diveintogo/functions2.go /START OMIT/,/END OMIT/


#########################
* Conditions (1/2)

- *if*

    if x > 0 {
        return
    }

- *if* with a temporary variable
    if err := DoSth(); err != nil {
        log.Println(err)
        return err
    }


#########################
* Conditions (2/2)

- *switch*

.play diveintogo/switch.go /START OMIT/,/END OMIT/

`fallthrough` 를 넣으면 `break` 가 필요


#########################
* Loop (1/2)

*for* 키워드 *만* 사용
`continue`, `break`, 레이블 사용 가능
`for` 에서 `++i` 는 syntax error

- `for`

    for i := 0; i < size; i++ {
        // do something
    }

- `while`

    for i > 0 {
        // do something
    }


#########################
* Loop (2/2)

- Forever

    for {
        // do something
    }

- with `range`

.play diveintogo/loop.go /START OMIT/,/END OMIT/


#########################
* Enumerations

*const*, *iota* 키워드 사용

.play diveintogo/enumerations.go /START OMIT/,/END OMIT/


#########################
* Structures and Methods

*type*, *struct* 키워드 사용

.code diveintogo/structures.go /START OMIT/,/END OMIT/

Go 컴파일러 역시 함수 내에서 변수가 선언되면 스택에 할당됨
하지만, 그 변수의 주소가 반환되면 힙에 할당 됨


#########################
* Methods (1/2)

.play diveintogo/methods1.go /START OMIT/,/END OMIT/

- public
  
    대문자로 시작

- private

    소문자로 시작, 다른 패키지에서 접근 불가


#########################
* package

.image diveintogo/package.png 480 600


#########################
* Methods (2/2)

- Java의 `Integer` class

.play diveintogo/methods2.go /START OMIT/,/END OMIT/

`struct` 뿐만 아니라 어떤 타입이든 method를 정의할 수 있음

Objective-C의 `category` 와 비슷하게
함수 명 앞에 *receiver* (여기선 `self`) 를 정의하면 method 역할을 함


#########################
* Interfaces (1/2)

.code diveintogo/interfaces1.go /START OMIT/,/END OMIT/


#########################
* Interfaces (2/2)

.play diveintogo/interfaces2.go /START OMIT/,/END OMIT/

Java와 다르게 명시적으로 붙여줄 필요 없음
`struct` 가 `interface` 보다 먼저 선언되어야 하는 것은 아님
3rd party `struct` 와 결합 용이


#########################
* Casting Types

묵시적 형변환을 허용하지 않음

.play diveintogo/types1.go /START OMIT/,/END OMIT/

같은 타입이어도 형변환 필요

.play diveintogo/types2.go /START OMIT/,/END OMIT/


###############################################################################
* Arrays and Slices
###############################################################################

#########################
* Arrays (1/2)

- Declarations

.play diveintogo/arrays1.go /START OMIT/,/END OMIT/


#########################
* Arrays (2/2)

- Copying an array

.play diveintogo/arrays2.go /START OMIT/,/END OMIT/

별칭(레퍼런스?!)을 붙이는 것이 빠르겠지만,
동시성을 위한 코드에서는 버그 유발 위험

따라서 빠르고 정확한 코딩을 위해 Go에서는 복사하는 것이 기본


#########################
* Slices (1/2)

슬라이스는 배열의 뷰
종종 함수의 파라미터로 쓰임 (reference)

.image diveintogo/slice.png

.play diveintogo/slices1.go /START OMIT/,/END OMIT/


#########################
* Slices (2/2)

기존 슬라이스에 다른 값을 추가한다면?!

.play diveintogo/slices2.go /START OMIT/,/END OMIT/


#########################
* Iterating

.play diveintogo/iter.go /START OMIT/,/END OMIT/


###############################################################################
* Strings
###############################################################################

#########################
* UTF-8 Designers

.image diveintogo/rob_pike.png 255 300

- Rob Pike
- Ken Thompson

#########################
* Strings

Go는 UTF-8을 사용
immutable type
배열처럼 slice 사용 가능

인덱스 사용시 주의할 것

.play diveintogo/loop.go /START OMIT/,/END OMIT/

`rune` 타입 이용

.play diveintogo/strings.go /START OMIT/,/END OMIT/


#########################
* Regular Expression

아래 자료 참조

- [[https://github.com/importre/gore/wiki/package-regexp][package regexp]] : 정규식 패키지 설명(한글)
- [[http://goregex.appspot.com/][gore]] : package regexp 웹 테스터


###############################################################################
* Collections
###############################################################################

* Collections

- `map`
- `list`


#########################
* map? set!

반드시 `make` 를 통해 생성

.play diveintogo/maps1.go /START OMIT/,/END OMIT/

key 값은 `==` 연산자로 비교할 수 있어야 함 (Go는 연산자 오버로딩이 없음)
`struct` 는 재귀적으로 비교하기 때문에 key로 가능 (Go 1.0 이후)
값은 제약 없음


#########################
* map - range, delete

`range` 로 순회 가능
`delete` 내장 함수로 삭제

.play diveintogo/maps2.go /START OMIT/,/END OMIT/


#########################
* list

`map` 처럼 내장 타입이 아님

.play diveintogo/list.go /START OMIT/,/END OMIT/


###############################################################################
* Handling Errors
###############################################################################

#########################
* Handling Errors

- `error`
- `panic`
- `recover`
- `defer`


#########################
* error (1/3)

아래 인터페이스를 등록해 놓으면, `error` 를 반환할 때 자동 호출

    type error interface {
        Error() string
    }


#########################
* error (2/3)

.play diveintogo/error1.go /START OMIT/,/END OMIT/


#########################
* error (3/3)

.play diveintogo/error2.go


#########################
* panic, recover, defer

- `throw`, `exception`

.play diveintogo/panic.go /START OMIT/,/END OMIT/

- Go 1.1 부터 `Int` / `0` 는 컴파일 에러


#########################
* defer (1/2)

함수 반환 시점에 호출됨
Stack과 같이 먼저 들어간 작업이 나중에 호출됨

.play diveintogo/defer1.go /START OMIT/,/END OMIT/


#########################
* defer (2/2)

- An example

.code diveintogo/defer2.go /START OMIT/,/END OMIT/


###############################################################################
* Goroutines
###############################################################################

* Goroutines

- `go`
- `channel`


#########################
* Goroutines (1/3)

같은 주소 공간에서 다른 _goroutine_ 과 동시에 실행되는 함수

- 백그라운드 작업

    $ tar cfz foo.tar.gz foo/ &

- `thread` 와 비슷한 액션
- 만들기 쉬움 (pthread도 쉬운데?!)
- 가벼움


#########################
* Goroutines (2/3)

.image diveintogo/thread.png 480 600


#########################
* Goroutines (3/3)

.image diveintogo/goroutine.png 480 600


#########################
* go (1/3)

- Example: Google Search

.image diveintogo/search.jpg 480 600


#########################
* go (2/3)

- [[diveintogo/go1.go][Source]]

.play diveintogo/go1.go /START OMIT/,/END OMIT/


#########################
* go (3/3)

`go` 를 함수 앞에!

.play diveintogo/go2.go /START OMIT/,/END OMIT/


#########################
* channel

- [[diveintogo/channel.go][Source]]

.play diveintogo/channel.go /START OMIT/,/END OMIT/

Do not communicate by sharing memory; instead, share memory by communicating.


#########################
* select

.play diveintogo/select.go /START OMIT/,/END OMIT/




###############################################################################
* GDG Korea Golang
###############################################################################

#########################
* GDG Korea Golang

.image diveintogo/GDG_Korea_Golang.png

- [[https://plus.google.com/112714242728066184635/][Google+ Community]]

